from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.database.crud.auto_purchase import get_user_settings, update_settings
from app.keyboards.auto_purchase_kb import (
    get_auto_purchase_settings,
    get_price_buttons,
    get_supply_limit_buttons,
    get_cycles_buttons,
)

from app.keyboards.callback import AutoPurchaseSettingsCallback

router = Router()


@router.callback_query(AutoPurchaseSettingsCallback.filter())
async def show_auto_purchase_settings(callback: CallbackQuery, callback_data: AutoPurchaseSettingsCallback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏"""

    if callback_data.type == "min_price":
        await update_settings(callback.from_user.id, min_price=callback_data.number)
    elif callback_data.type == "max_price":
        await update_settings(callback.from_user.id, max_price=callback_data.number)
    elif callback_data.type == "supply_limit":
        await update_settings(callback.from_user.id, supply_limit=callback_data.number)
    elif callback_data.type == "cycles":
        await update_settings(callback.from_user.id, purchase_cycles=callback_data.number)
    elif callback_data.type == "is_enabled":
        await update_settings(callback.from_user.id, is_enabled=callback_data.number)

    settings = await get_user_settings(callback.from_user.id)
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω–æ' if settings.is_enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
        "–õ–∏–º–∏—Ç —Ü–µ–Ω—ã:\n"
        f"–û—Ç {settings.min_price} –¥–æ {settings.max_price} ‚≠êÔ∏è\n\n"
        f"–õ–∏–º–∏—Ç —Å–∞–ø–ª–∞—è: {settings.supply_limit}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {settings.purchase_cycles}",
        reply_markup=get_auto_purchase_settings(is_auto_purchase=settings.is_enabled)
    )

@router.callback_query(F.data == "min_price")
async def show_min_price_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º—É–º —Ü–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n(–±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥–µ—à–µ–≤–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)",
        reply_markup=get_price_buttons(type="min_price")
    )
    

@router.callback_query(F.data == "max_price")
async def show_max_price_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º —Ü–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n(–±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥–æ—Ä–æ–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)",
        reply_markup=get_price_buttons(type="max_price")
    )

@router.callback_query(F.data == "supply_limit")
async def show_supply_limit_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–∞–ø–ª–∞—è"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å–∞–ø–ª–∞—è –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n(–±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫, –µ—Å–ª–∏ –∏—Ö –≤—ã–ø—É—â–µ–Ω–æ –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)",
        reply_markup=get_supply_limit_buttons()
    )

@router.callback_query(F.data == "cycles")
async def show_cycles_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n(—Ç–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±–æ—Ç –∫—É–ø–∏—Ç –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—ã—Ö–æ–¥–∏—Ç 3 –ø–æ–¥–∞—Ä–∫–∞, —Ü–∏–∫–ª–æ–≤ 2 - –±–æ—Ç –∫—É–ø–∏—Ç –∫–∞–∂–¥—ã–π –ø–æ 2 —Ä–∞–∑–∞ = 6 –ø–æ–¥–∞—Ä–∫–æ–≤)",
        reply_markup=get_cycles_buttons()
    )