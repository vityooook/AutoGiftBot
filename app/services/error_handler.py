from loguru import logger
from functools import wraps
from typing import Callable, Any
import traceback

from app.loader import bot

ADMIN_ID = 487961820

async def send_error_notification(error: Exception, context: str = "") -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        error_message = (
            f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n"
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(error).__name__}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}\n\n"
            f"–¢—Ä–µ–π—Å–±–µ–∫:\n{traceback.format_exc()}"
        )
        await bot.send_message(ADMIN_ID, error_message)
        logger.error(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def handle_errors(context: str = "") -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args: Any, **kwargs: Any) -> Any:
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                await send_error_notification(e, f"{context} ({func.__name__})")
                raise
        return wrapper
    return decorator 